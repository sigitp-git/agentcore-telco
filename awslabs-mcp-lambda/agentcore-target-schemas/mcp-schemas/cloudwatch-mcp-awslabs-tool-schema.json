[
  {
    "name": "describe_log_groups",
    "description": "Lists AWS CloudWatch log groups and saved queries associated with them, optionally filtering by a name prefix.\n\n        This tool retrieves information about log groups in the account, or log groups in accounts linked to this account as a monitoring account.\n        If a prefix is provided, only log groups with names starting with the specified prefix are returned.\n\n        Additionally returns any user saved queries that are associated with any of the returned log groups.\n\n        Usage: Use this tool to discover log groups that you'd retrieve or query logs from and queries that have been saved by the user.\n\n        Returns:\n        --------\n        List of log group metadata dictionaries and saved queries associated with them\n           Each log group metadata contains details such as:\n                - logGroupName: The name of the log group.\n                - creationTime: Timestamp when the log group was created\n                - retentionInDays: Retention period, if set\n                - storedBytes: The number of bytes stored.\n                - kmsKeyId: KMS Key Id used for data encryption, if set\n                - dataProtectionStatus: Displays whether this log group has a protection policy, or whether it had one in the past, if set\n                - logGroupClass: Type of log group class\n                - logGroupArn: The Amazon Resource Name (ARN) of the log group. This version of the ARN doesn't include a trailing :* after the log group name.\n            Any saved queries that are applicable to the returned log groups are also included.\n        ",
    "inputSchema": {
      "type": "object",
      "properties": {
        "account_identifiers": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "When include_linked_accounts is set to True, use this parameter to specify the list of accounts to search. IMPORTANT: Only has affect if include_linked_accounts is True",
          "title": "Account Identifiers"
        },
        "include_linked_accounts": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": false,
          "description": "If the AWS account is a monitoring account, set this to True to have the tool return log groups in the accounts listed in account_identifiers.\n                If this parameter is set to true and account_identifiers contains a null value, the tool returns all log groups in the monitoring account and all log groups in all source accounts that are linked to the monitoring account.",
          "title": "Include Linked Accounts"
        },
        "log_group_class": {
          "anyOf": [
            {
              "enum": [
                "STANDARD",
                "INFREQUENT_ACCESS"
              ],
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "If specified, filters for only log groups of the specified class.",
          "title": "Log Group Class"
        },
        "log_group_name_prefix": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "An exact prefix to filter log groups by name. IMPORTANT: Only log groups with names starting with this prefix will be returned.",
          "title": "Log Group Name Prefix"
        },
        "max_items": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The maximum number of log groups to return.",
          "title": "Max Items"
        },
        "region": {
          "default": "us-east-1",
          "description": "AWS region to query. Defaults to us-east-1.",
          "title": "Region",
          "type": "string"
        }
      },
      "title": "describe_log_groupsArguments"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "log_group_metadata": {
          "description": "List of metadata about log groups",
          "items": {
            "$ref": "#/$defs/LogGroupMetadata"
          },
          "title": "Log Group Metadata",
          "type": "array"
        },
        "saved_queries": {
          "description": "Saved queries associated with the log",
          "items": {
            "$ref": "#/$defs/SavedLogsInsightsQuery"
          },
          "title": "Saved Queries",
          "type": "array"
        }
      },
      "required": [
        "log_group_metadata",
        "saved_queries"
      ],
      "$defs": {
        "LogGroupMetadata": {
          "description": "Represents metadata for a CloudWatch log group.",
          "properties": {
            "logGroupName": {
              "description": "The name of the log group",
              "title": "Loggroupname",
              "type": "string"
            },
            "creationTime": {
              "description": "ISO 8601 timestamp when the log group was created",
              "title": "Creationtime",
              "type": "string"
            },
            "retentionInDays": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Retention period, if set",
              "title": "Retentionindays"
            },
            "metricFilterCount": {
              "description": "Number of metric filters",
              "title": "Metricfiltercount",
              "type": "integer"
            },
            "storedBytes": {
              "description": "The number of bytes stored",
              "title": "Storedbytes",
              "type": "integer"
            },
            "kmsKeyId": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "KMS Key Id used for data encryption, if set",
              "title": "Kmskeyid"
            },
            "dataProtectionStatus": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Displays whether this log group has a protection policy, or whether it had one in the past",
              "title": "Dataprotectionstatus"
            },
            "inheritedProperties": {
              "default": [],
              "description": "List of inherited properties for the log group",
              "items": {
                "type": "string"
              },
              "title": "Inheritedproperties",
              "type": "array"
            },
            "logGroupClass": {
              "default": "STANDARD",
              "description": "Type of log group class either STANDARD or INFREQUENT_ACCESS",
              "title": "Loggroupclass",
              "type": "string"
            },
            "logGroupArn": {
              "description": "The Amazon Resource Name (ARN) of the log group. This version of the ARN doesn't include a trailing :* after the log group name",
              "title": "Loggrouparn",
              "type": "string"
            }
          },
          "required": [
            "logGroupName",
            "creationTime",
            "metricFilterCount",
            "storedBytes",
            "logGroupArn"
          ],
          "title": "LogGroupMetadata",
          "type": "object"
        },
        "SavedLogsInsightsQuery": {
          "description": "Represents a saved CloudWatch Logs Insights query.",
          "properties": {
            "logGroupNames": {
              "description": "Log groups associated with the query, optional.",
              "items": {
                "type": "string"
              },
              "title": "Loggroupnames",
              "type": "array",
              "uniqueItems": true
            },
            "name": {
              "description": "Name of the saved query",
              "title": "Name",
              "type": "string"
            },
            "queryString": {
              "description": "The query string in the Cloudwatch Log Insights Query Language.",
              "title": "Querystring",
              "type": "string"
            },
            "logGroupPrefixes": {
              "description": "Prefixes of log groups associated with the query, optional.",
              "items": {
                "type": "string"
              },
              "title": "Loggroupprefixes",
              "type": "array",
              "uniqueItems": true
            }
          },
          "required": [
            "name",
            "queryString"
          ],
          "title": "SavedLogsInsightsQuery",
          "type": "object"
        }
      },
      "description": "Represents information about a CloudWatch log.",
      "title": "LogsMetadata"
    }
  },
  {
    "name": "analyze_log_group",
    "description": "Analyzes a CloudWatch log group for anomalies, message patterns, and error patterns within a specified time window.\n\n        This tool performs an analysis of the specified log group by:\n        1. Discovering and checking log anomaly detectors associated with the log group\n        2. Retrieving anomalies from those detectors that fall within the specified time range\n        3. Identifying the top 5 most common message patterns\n        4. Finding the top 5 patterns containing error-related terms\n\n        Usage: Use this tool to detect anomalies and understand common patterns in your log data, particularly\n        focusing on error patterns that might indicate issues. This can help identify potential problems and\n        understand the typical behavior of your application.\n\n        Returns:\n        --------\n        A LogsAnalysisResult object containing:\n            - log_anomaly_results: Information about anomaly detectors and their findings\n                * anomaly_detectors: List of anomaly detectors for the log group\n                * anomalies: List of anomalies that fall within the specified time range\n            - top_patterns: Results of the query for most common message patterns\n            - top_patterns_containing_errors: Results of the query for patterns containing error-related terms\n                (error, exception, fail, timeout, fatal)\n        ",
    "inputSchema": {
      "type": "object",
      "properties": {
        "log_group_arn": {
          "description": "The log group arn to look for anomalies in, as returned by the describe_log_groups tools",
          "title": "Log Group Arn",
          "type": "string"
        },
        "start_time": {
          "description": "ISO 8601 formatted start time for the CloudWatch Logs Insights query window (e.g., \"2025-04-19T20:00:00+00:00\").",
          "title": "Start Time",
          "type": "string"
        },
        "end_time": {
          "description": "ISO 8601 formatted end time for the CloudWatch Logs Insights query window (e.g., \"2025-04-19T21:00:00+00:00\").",
          "title": "End Time",
          "type": "string"
        },
        "region": {
          "default": "us-east-1",
          "description": "AWS region to query. Defaults to us-east-1.",
          "title": "Region",
          "type": "string"
        }
      },
      "required": [
        "log_group_arn",
        "start_time",
        "end_time"
      ],
      "title": "analyze_log_groupArguments"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "log_anomaly_results": {
          "$ref": "#/$defs/LogAnomalyResults",
          "description": "Results of looking for applicable log anomalies in the log group"
        },
        "top_patterns": {
          "additionalProperties": true,
          "description": "Top message patterns found in the log group",
          "title": "Top Patterns",
          "type": "object"
        },
        "top_patterns_containing_errors": {
          "additionalProperties": true,
          "description": "Top error patterns for messages containing errors found in the log group",
          "title": "Top Patterns Containing Errors",
          "type": "object"
        }
      },
      "required": [
        "log_anomaly_results",
        "top_patterns",
        "top_patterns_containing_errors"
      ],
      "$defs": {
        "LogAnomaly": {
          "description": "Represents a detected log anomaly.",
          "properties": {
            "anomalyDetectorArn": {
              "description": "The ARN of the detector that found this anomaly",
              "title": "Anomalydetectorarn",
              "type": "string"
            },
            "logGroupArnList": {
              "description": "List of log group ARNs that match this anomaly",
              "items": {
                "type": "string"
              },
              "title": "Loggrouparnlist",
              "type": "array"
            },
            "firstSeen": {
              "description": "ISO 8601 timestamp when this pattern was first seen",
              "title": "Firstseen",
              "type": "string"
            },
            "lastSeen": {
              "description": "ISO 8601 timestamp when this pattern was last seen",
              "title": "Lastseen",
              "type": "string"
            },
            "description": {
              "description": "Description of the anomaly",
              "title": "Description",
              "type": "string"
            },
            "priority": {
              "description": "Priority of the anomaly",
              "title": "Priority",
              "type": "string"
            },
            "patternRegex": {
              "description": "Regex pattern that matched this anomaly",
              "title": "Patternregex",
              "type": "string"
            },
            "patternString": {
              "description": "String pattern that matched this anomaly",
              "title": "Patternstring",
              "type": "string"
            },
            "logSamples": {
              "description": "Sample log messages that matched this anomaly",
              "items": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "title": "Logsamples",
              "type": "array"
            },
            "histogram": {
              "additionalProperties": {
                "type": "integer"
              },
              "description": "Histogram of log message counts for this anomaly",
              "title": "Histogram",
              "type": "object"
            }
          },
          "required": [
            "anomalyDetectorArn",
            "logGroupArnList",
            "firstSeen",
            "lastSeen",
            "description",
            "priority",
            "patternRegex",
            "patternString",
            "logSamples",
            "histogram"
          ],
          "title": "LogAnomaly",
          "type": "object"
        },
        "LogAnomalyDetector": {
          "description": "Represents a CloudWatch Logs Anomaly Detector.",
          "properties": {
            "anomalyDetectorArn": {
              "description": "The ARN of the anomaly detector",
              "title": "Anomalydetectorarn",
              "type": "string"
            },
            "detectorName": {
              "description": "The name of the anomaly detector",
              "title": "Detectorname",
              "type": "string"
            },
            "anomalyDetectorStatus": {
              "description": "The current status of the anomaly detector",
              "title": "Anomalydetectorstatus",
              "type": "string"
            }
          },
          "required": [
            "anomalyDetectorArn",
            "detectorName",
            "anomalyDetectorStatus"
          ],
          "title": "LogAnomalyDetector",
          "type": "object"
        },
        "LogAnomalyResults": {
          "description": "Represents the results of a log anomaly query.",
          "properties": {
            "anomaly_detectors": {
              "description": "List of anomaly detectors monitoring this log group",
              "items": {
                "$ref": "#/$defs/LogAnomalyDetector"
              },
              "title": "Anomaly Detectors",
              "type": "array"
            },
            "anomalies": {
              "description": "List of anomalies found in the specified time range",
              "items": {
                "$ref": "#/$defs/LogAnomaly"
              },
              "title": "Anomalies",
              "type": "array"
            }
          },
          "required": [
            "anomaly_detectors",
            "anomalies"
          ],
          "title": "LogAnomalyResults",
          "type": "object"
        }
      },
      "description": "Result of analyzing a log group.",
      "title": "LogsAnalysisResult"
    }
  },
  {
    "name": "execute_log_insights_query",
    "description": "Executes a CloudWatch Logs Insights query and waits for the results to be available.\n\n        IMPORTANT: The operation must include exactly one of the following parameters: log_group_names, or log_group_identifiers.\n\n        CRITICAL: The volume of returned logs can easily overwhelm the agent context window. Always include a limit in the query\n        (| limit 50) or using the limit parameter.\n\n        Usage: Use to query, filter, collect statistics, or find patterns in one or more log groups. For example, the following\n        query lists exceptions per hour.\n\n        ```\n        filter @message like /Exception/\n        | stats count(*) as exceptionCount by bin(1h)\n        | sort exceptionCount desc\n        ```\n\n        Returns:\n        --------\n            A dictionary containing the final query results, including:\n                - status: The current status of the query (e.g., Scheduled, Running, Complete, Failed, etc.)\n                - results: A list of the actual query results if the status is Complete.\n                - statistics: Query performance statistics\n                - messages: Any informational messages about the query\n        ",
    "inputSchema": {
      "type": "object",
      "properties": {
        "log_group_names": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "maxItems": 50,
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The list of up to 50 log group names to be queried. CRITICAL: Exactly one of [log_group_names, log_group_identifiers] should be non-null.",
          "title": "Log Group Names"
        },
        "log_group_identifiers": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "maxItems": 50,
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The list of up to 50 logGroupIdentifiers to query. You can specify them by the log group name or ARN. If a log group that you're querying is in a source account and you're using a monitoring account, you must use the ARN. CRITICAL: Exactly one of [log_group_names, log_group_identifiers] should be non-null.",
          "title": "Log Group Identifiers"
        },
        "start_time": {
          "description": "ISO 8601 formatted start time for the CloudWatch Logs Insights query window (e.g., \"2025-04-19T20:00:00+00:00\").",
          "title": "Start Time",
          "type": "string"
        },
        "end_time": {
          "description": "ISO 8601 formatted end time for the CloudWatch Logs Insights query window (e.g., \"2025-04-19T21:00:00+00:00\").",
          "title": "End Time",
          "type": "string"
        },
        "query_string": {
          "description": "The query string in the Cloudwatch Log Insights Query Language. See https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html.",
          "title": "Query String",
          "type": "string"
        },
        "limit": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The maximum number of log events to return. It is critical to use either this parameter or a `| limit <int>` operator in the query to avoid consuming too many tokens of the agent.",
          "title": "Limit"
        },
        "max_timeout": {
          "default": 30,
          "description": "Maximum time in second to poll for complete results before giving up",
          "title": "Max Timeout",
          "type": "integer"
        },
        "region": {
          "default": "us-east-1",
          "description": "AWS region to query. Defaults to us-east-1.",
          "title": "Region",
          "type": "string"
        }
      },
      "required": [
        "start_time",
        "end_time",
        "query_string"
      ],
      "title": "execute_log_insights_queryArguments"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "result": {
          "additionalProperties": true,
          "title": "Result",
          "type": "object"
        }
      },
      "required": [
        "result"
      ],
      "title": "execute_log_insights_queryOutput"
    }
  },
  {
    "name": "get_logs_insight_query_results",
    "description": "Retrieves the results of a previously started CloudWatch Logs Insights query.\n\n        Usage: If a log query is started by execute_log_insights_query tool and has a polling time out, this tool can be used to try to retrieve\n        the query results again.\n\n        Returns:\n        --------\n            A dictionary containing the final query results, including:\n                - status: The current status of the query (e.g., Scheduled, Running, Complete, Failed, etc.)\n                - results: A list of the actual query results if the status is Complete.\n                - statistics: Query performance statistics\n                - messages: Any informational messages about the query\n        ",
    "inputSchema": {
      "type": "object",
      "properties": {
        "query_id": {
          "description": "The unique ID of the query to retrieve the results for. CRITICAL: This ID is returned by the execute_log_insights_query tool.",
          "title": "Query Id",
          "type": "string"
        },
        "region": {
          "default": "us-east-1",
          "description": "AWS region to query. Defaults to us-east-1.",
          "title": "Region",
          "type": "string"
        }
      },
      "required": [
        "query_id"
      ],
      "title": "get_logs_insight_query_resultsArguments"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "result": {
          "additionalProperties": true,
          "title": "Result",
          "type": "object"
        }
      },
      "required": [
        "result"
      ],
      "title": "get_logs_insight_query_resultsOutput"
    }
  },
  {
    "name": "cancel_logs_insight_query",
    "description": "Cancels an ongoing CloudWatch Logs Insights query. If the query has already ended, returns an error that the given query is not running.\n\n        Usage: If a log query is started by execute_log_insights_query tool and has a polling time out, this tool can be used to cancel\n        it prematurely to avoid incurring additional costs.\n\n        Returns:\n        --------\n            A LogsQueryCancelResult with a \"success\" key, which is True if the query was successfully cancelled.\n        ",
    "inputSchema": {
      "type": "object",
      "properties": {
        "query_id": {
          "description": "The unique ID of the ongoing query to cancel. CRITICAL: This ID is returned by the execute_log_insights_query tool.",
          "title": "Query Id",
          "type": "string"
        },
        "region": {
          "default": "us-east-1",
          "description": "AWS region to query. Defaults to us-east-1.",
          "title": "Region",
          "type": "string"
        }
      },
      "required": [
        "query_id"
      ],
      "title": "cancel_logs_insight_queryArguments"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "success": {
          "description": "True if the logs insight query was successfully cancelled, false otherwise",
          "title": "Success",
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ],
      "description": "Result of canceling Logs Insight query.",
      "title": "LogsQueryCancelResult"
    }
  },
  {
    "name": "get_metric_data",
    "description": "Retrieves CloudWatch metric data for a specific metric.\n\n        This tool retrieves metric data from CloudWatch for a specific metric identified by its\n        namespace, metric name, and dimensions, within a specified time range. It can use either\n        standard GetMetricData API or CloudWatch Metrics Insights for more advanced querying.\n\n        The function automatically determines whether to use standard GetMetricData or Metrics Insights\n        based on the parameters provided. If any Metrics Insights specific parameters are provided\n        (group_by_dimension, schema_dimension_keys, limit, sort_order, or order_by_statistic), it will use Metrics Insights.\n\n        When using group_by_dimension, you must include that dimension in schema_dimension_keys.\n\n        Usage: Use this tool to get actual metric data from CloudWatch for analysis or visualization.\n\n        Returns:\n            GetMetricDataResponse: An object containing the metric data results\n\n        Example 1 (Standard GetMetricData):\n            result = await get_metric_data(\n                ctx,\n                namespace=\"AWS/EC2\",\n                metric_name=\"CPUUtilization\",\n                start_time=\"2023-01-01T00:00:00Z\",\n                dimensions=[\n                    Dimension(name=\"InstanceId\", value=\"i-1234567890abcdef0\")\n                ],\n                statistic=\"Average\"\n                # Period will be auto-calculated based on time window and target_datapoints\n            )\n\n        Example 2 (Metrics Insights with group by):\n            result = await get_metric_data(\n                ctx,\n                namespace=\"AWS/EC2\",\n                metric_name=\"CPUUtilization\",\n                start_time=\"2023-01-01T00:00:00Z\",\n                end_time=\"2023-01-02T00:00:00Z\",\n                statistic=\"AVG\",\n                schema_dimension_keys=[\"InstanceType\"],\n                group_by_dimension=\"InstanceType\"\n                # This will generate a query like: SELECT AVG(\"CPUUtilization\") FROM SCHEMA(\"AWS/EC2\", \"InstanceType\") GROUP BY \"InstanceType\"\n            )\n\n        Example 3 (Metrics Insights with schema dimension keys):\n            result = await get_metric_data(\n                ctx,\n                namespace=\"AWS/EC2\",\n                metric_name=\"CPUUtilization\",\n                start_time=\"2023-01-01T00:00:00Z\",\n                end_time=\"2023-01-02T00:00:00Z\",\n                statistic=\"AVG\",\n                schema_dimension_keys=[\"InstanceId\", \"InstanceType\"],\n                group_by_dimension=\"InstanceId\"\n                # This will generate a query like: SELECT AVG(\"CPUUtilization\") FROM SCHEMA(\"AWS/EC2\", \"InstanceId\", \"InstanceType\") GROUP BY \"InstanceId\"\n            )\n\n        Example 4 (Metrics Insights with ORDER BY and LIMIT to find the top 5 EC2 instances with the highest CPU utilization):\n            result = await get_metric_data(\n                ctx,\n                namespace=\"AWS/EC2\",\n                metric_name=\"CPUUtilization\",\n                start_time=\"2023-01-01T00:00:00Z\",\n                end_time=\"2023-01-02T00:00:00Z\",\n                statistic=\"AVG\",\n                schema_dimension_keys=[\"InstanceId\"],\n                group_by_dimension=\"InstanceId\",\n                sort_order=\"DESC\",\n                limit=5,\n                order_by_statistic=\"MAX\"\n                # This will generate a query like: SELECT AVG(\"CPUUtilization\") FROM SCHEMA(\"AWS/EC2\", \"InstanceId\") GROUP BY \"InstanceId\" ORDER BY MAX() DESC LIMIT 5\n            )\n\n        Example 5 (Metrics Insights with ORDER BY without sort direction to find the EC2 instances with the highest CPU utilization ordered by default ASC):\n            result = await get_metric_data(\n                ctx,\n                namespace=\"AWS/EC2\",\n                metric_name=\"CPUUtilization\",\n                start_time=\"2023-01-01T00:00:00Z\",\n                end_time=\"2023-01-02T00:00:00Z\",\n                statistic=\"AVG\",\n                schema_dimension_keys=[\"InstanceId\"],\n                group_by_dimension=\"InstanceId\",\n                order_by_statistic=\"MAX\"\n                # This will generate a query like: SELECT AVG(\"CPUUtilization\") FROM SCHEMA(\"AWS/EC2\", \"InstanceId\") GROUP BY \"InstanceId\" ORDER BY MAX()\n            )\n\n        Example 6 (Metrics Insights without ORDER BY clause to find the EC2 instances with the highest CPU utilization in no specific order):\n            result = await get_metric_data(\n                ctx,\n                namespace=\"AWS/EC2\",\n                metric_name=\"CPUUtilization\",\n                start_time=\"2023-01-01T00:00:00Z\",\n                end_time=\"2023-01-02T00:00:00Z\",\n                statistic=\"AVG\",\n                schema_dimension_keys=[\"InstanceId\"],\n                group_by_dimension=\"InstanceId\"\n                # This will generate a query like: SELECT AVG(\"CPUUtilization\") FROM SCHEMA(\"AWS/EC2\", \"InstanceId\") GROUP BY \"InstanceId\"\n                # No ORDER BY clause is added since neither order_by_statistic nor sort_order is specified\n            )\n\n        For each result:\n            for metric_result in result.metricDataResults:\n                print(f\"Metric: {metric_result.label}\")\n                for datapoint in metric_result.datapoints:\n                    print(f\"  {datapoint.timestamp}: {datapoint.value}\")\n        ",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "title": "Namespace",
          "type": "string"
        },
        "metric_name": {
          "title": "Metric Name",
          "type": "string"
        },
        "start_time": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "format": "date-time",
              "type": "string"
            }
          ],
          "title": "Start Time"
        },
        "dimensions": {
          "default": [],
          "items": {
            "$ref": "#/$defs/Dimension"
          },
          "title": "Dimensions",
          "type": "array"
        },
        "end_time": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "format": "date-time",
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The end time for the metric data query (ISO format or datetime), defaults to current time",
          "title": "End Time"
        },
        "statistic": {
          "default": "AVG",
          "description": "The statistic to use for the metric",
          "enum": [
            "AVG",
            "COUNT",
            "MAX",
            "MIN",
            "SUM",
            "Average",
            "Sum",
            "Maximum",
            "Minimum",
            "SampleCount"
          ],
          "title": "Statistic",
          "type": "string"
        },
        "target_datapoints": {
          "default": 60,
          "description": "Target number of data points to return (default: 60). Controls the granularity of the returned data.",
          "title": "Target Datapoints",
          "type": "integer"
        },
        "group_by_dimension": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Dimension name to group by in Metrics Insights mode. Must be included in schema_dimension_keys.",
          "title": "Group By Dimension"
        },
        "schema_dimension_keys": {
          "default": [],
          "description": "List of dimension keys to include in the SCHEMA definition for Metrics Insights query.",
          "items": {
            "type": "string"
          },
          "title": "Schema Dimension Keys",
          "type": "array"
        },
        "limit": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Maximum number of results to return in Metrics Insights mode (used with LIMIT clause).",
          "title": "Limit"
        },
        "sort_order": {
          "anyOf": [
            {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Sort order for results when using ORDER BY in Metrics Insights. Can be 'ASC', 'DESC', or None.",
          "title": "Sort Order"
        },
        "order_by_statistic": {
          "anyOf": [
            {
              "enum": [
                "AVG",
                "COUNT",
                "MAX",
                "MIN",
                "SUM"
              ],
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Statistic to use in the ORDER BY clause. Required if sort_order is specified.",
          "title": "Order By Statistic"
        },
        "region": {
          "default": "us-east-1",
          "description": "AWS region to query. Defaults to us-east-1.",
          "title": "Region",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "metric_name",
        "start_time"
      ],
      "$defs": {
        "Dimension": {
          "description": "Represents a CloudWatch metric dimension for input parameters.",
          "properties": {
            "name": {
              "description": "The name of the dimension",
              "title": "Name",
              "type": "string"
            },
            "value": {
              "description": "The value of the dimension",
              "title": "Value",
              "type": "string"
            }
          },
          "required": [
            "name",
            "value"
          ],
          "title": "Dimension",
          "type": "object"
        }
      },
      "title": "get_metric_dataArguments"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "metricDataResults": {
          "description": "The results of the metric data queries",
          "items": {
            "$ref": "#/$defs/MetricDataResult"
          },
          "title": "Metricdataresults",
          "type": "array"
        },
        "messages": {
          "description": "Messages related to the GetMetricData operation",
          "items": {
            "additionalProperties": true,
            "type": "object"
          },
          "title": "Messages",
          "type": "array"
        }
      },
      "$defs": {
        "MetricDataPoint": {
          "description": "Represents a single CloudWatch metric data point.",
          "properties": {
            "timestamp": {
              "description": "The timestamp for the data point",
              "format": "date-time",
              "title": "Timestamp",
              "type": "string"
            },
            "value": {
              "description": "The value of the metric at this timestamp",
              "title": "Value",
              "type": "number"
            }
          },
          "required": [
            "timestamp",
            "value"
          ],
          "title": "MetricDataPoint",
          "type": "object"
        },
        "MetricDataResult": {
          "description": "Represents the result of a CloudWatch GetMetricData API call for a single metric.",
          "properties": {
            "id": {
              "description": "The ID of the metric data query",
              "title": "Id",
              "type": "string"
            },
            "label": {
              "description": "The label of the metric",
              "title": "Label",
              "type": "string"
            },
            "statusCode": {
              "description": "The status code of the query result",
              "title": "Statuscode",
              "type": "string"
            },
            "datapoints": {
              "description": "The data points for the metric",
              "items": {
                "$ref": "#/$defs/MetricDataPoint"
              },
              "title": "Datapoints",
              "type": "array"
            },
            "messages": {
              "description": "Messages related to the metric data query",
              "items": {
                "additionalProperties": true,
                "type": "object"
              },
              "title": "Messages",
              "type": "array"
            }
          },
          "required": [
            "id",
            "label",
            "statusCode"
          ],
          "title": "MetricDataResult",
          "type": "object"
        }
      },
      "description": "Represents the response from the GetMetricData API call.",
      "title": "GetMetricDataResponse"
    }
  },
  {
    "name": "get_metric_metadata",
    "description": "Gets metadata for a CloudWatch metric including description, unit and recommended\n        statistics that can be used for metric data retrieval.\n\n        This tool retrieves comprehensive metadata about a specific CloudWatch metric\n        identified by its namespace and metric name.\n\n        Usage: Use this tool to get detailed information about CloudWatch metrics,\n        including their descriptions, units, and recommended statistics to use.\n\n        Args:\n            ctx: The MCP context object for error handling and logging.\n            namespace: The metric namespace (e.g., \"AWS/EC2\", \"AWS/Lambda\")\n            metric_name: The name of the metric (e.g., \"CPUUtilization\", \"Duration\")\n            region: AWS region to query. Defaults to 'us-east-1'.\n\n        Returns:\n            Optional[MetricMetadata]: An object containing the metric's description,\n                                     recommended statistics, and unit if found,\n                                     None if no metadata is available.\n\n        Example:\n            result = await get_metric_metadata(\n                ctx,\n                namespace=\"AWS/EC2\",\n                metric_name=\"CPUUtilization\"\n            )\n            if result:\n                print(f\"Description: {result.description}\")\n                print(f\"Unit: {result.unit}\")\n                print(f\"Recommended Statistics: {result.recommendedStatistics}\")\n        ",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "The namespace of the metric (e.g., 'AWS/EC2', 'AWS/Lambda')",
          "title": "Namespace",
          "type": "string"
        },
        "metric_name": {
          "description": "The name of the metric (e.g., 'CPUUtilization', 'Duration')",
          "title": "Metric Name",
          "type": "string"
        },
        "region": {
          "default": "us-east-1",
          "description": "AWS region for consistency. Note: This function uses local metadata and does not make AWS API calls. Defaults to us-east-1.",
          "title": "Region",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "metric_name"
      ],
      "title": "get_metric_metadataArguments"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "result": {
          "anyOf": [
            {
              "$ref": "#/$defs/MetricMetadata"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "result"
      ],
      "$defs": {
        "MetricMetadata": {
          "description": "Represents the metadata of a CloudWatch metric including description, unit and recommended statistics.",
          "properties": {
            "description": {
              "description": "Description of the metric",
              "title": "Description",
              "type": "string"
            },
            "recommendedStatistics": {
              "description": "Recommended statistics for the metric (e.g., 'Average, Maximum')",
              "title": "Recommendedstatistics",
              "type": "string"
            },
            "unit": {
              "description": "Unit of measurement for the metric",
              "title": "Unit",
              "type": "string"
            }
          },
          "required": [
            "description",
            "recommendedStatistics",
            "unit"
          ],
          "title": "MetricMetadata",
          "type": "object"
        }
      },
      "title": "get_metric_metadataOutput"
    }
  },
  {
    "name": "get_recommended_metric_alarms",
    "description": "Gets recommended alarms for a CloudWatch metric.\n\n        This tool retrieves alarm recommendations for a specific CloudWatch metric\n        identified by its namespace, metric name, and dimensions. The recommendations\n        are filtered to match the provided dimensions.\n\n        Usage: Use this tool to get recommended alarm configurations for CloudWatch metrics,\n        including thresholds, evaluation periods, and other alarm settings.\n\n        Args:\n            ctx: The MCP context object for error handling and logging.\n            namespace: The metric namespace (e.g., \"AWS/EC2\", \"AWS/Lambda\")\n            metric_name: The name of the metric (e.g., \"CPUUtilization\", \"Duration\")\n            dimensions: List of dimensions with name and value pairs\n            region: AWS region to query. Defaults to 'us-east-1'.\n\n        Returns:\n            List[AlarmRecommendation]: A list of alarm recommendations that match the\n                                     provided dimensions. Empty list if no recommendations\n                                     are found or available.\n\n        Example:\n            recommendations = await get_recommended_metric_alarms(\n                ctx,\n                namespace=\"AWS/EC2\",\n                metric_name=\"StatusCheckFailed_Instance\",\n                dimensions=[\n                    Dimension(name=\"InstanceId\", value=\"i-1234567890abcdef0\")\n                ]\n            )\n            for alarm in recommendations:\n                print(f\"Alarm: {alarm.alarmDescription}\")\n                print(f\"Threshold: {alarm.threshold.staticValue}\")\n        ",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "The namespace of the metric (e.g., 'AWS/EC2', 'AWS/Lambda')",
          "title": "Namespace",
          "type": "string"
        },
        "metric_name": {
          "description": "The name of the metric (e.g., 'CPUUtilization', 'Duration')",
          "title": "Metric Name",
          "type": "string"
        },
        "dimensions": {
          "description": "List of dimensions that identify the metric, each with name and value",
          "items": {
            "$ref": "#/$defs/Dimension"
          },
          "title": "Dimensions",
          "type": "array"
        },
        "region": {
          "default": "us-east-1",
          "description": "AWS region for consistency. Note: This function uses local metadata and does not make AWS API calls. Defaults to us-east-1.",
          "title": "Region",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "metric_name"
      ],
      "$defs": {
        "Dimension": {
          "description": "Represents a CloudWatch metric dimension for input parameters.",
          "properties": {
            "name": {
              "description": "The name of the dimension",
              "title": "Name",
              "type": "string"
            },
            "value": {
              "description": "The value of the dimension",
              "title": "Value",
              "type": "string"
            }
          },
          "required": [
            "name",
            "value"
          ],
          "title": "Dimension",
          "type": "object"
        }
      },
      "title": "get_recommended_metric_alarmsArguments"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "result": {
          "items": {
            "$ref": "#/$defs/AlarmRecommendation"
          },
          "title": "Result",
          "type": "array"
        }
      },
      "required": [
        "result"
      ],
      "$defs": {
        "AlarmRecommendation": {
          "description": "Represents a CloudWatch alarm recommendation.",
          "properties": {
            "alarmDescription": {
              "description": "Description of what the alarm monitors",
              "title": "Alarmdescription",
              "type": "string"
            },
            "threshold": {
              "$ref": "#/$defs/AlarmRecommendationThreshold",
              "description": "Threshold configuration for the alarm"
            },
            "period": {
              "description": "The period in seconds over which the statistic is applied",
              "title": "Period",
              "type": "integer"
            },
            "comparisonOperator": {
              "description": "The arithmetic operation to use when comparing the statistic and threshold",
              "title": "Comparisonoperator",
              "type": "string"
            },
            "statistic": {
              "description": "The statistic to apply to the alarm's associated metric",
              "title": "Statistic",
              "type": "string"
            },
            "evaluationPeriods": {
              "description": "The number of periods over which data is compared to the threshold",
              "title": "Evaluationperiods",
              "type": "integer"
            },
            "datapointsToAlarm": {
              "description": "The number of datapoints that must be breaching to trigger the alarm",
              "title": "Datapointstoalarm",
              "type": "integer"
            },
            "treatMissingData": {
              "description": "How to treat missing data points",
              "title": "Treatmissingdata",
              "type": "string"
            },
            "dimensions": {
              "description": "List of dimensions for the alarm",
              "items": {
                "$ref": "#/$defs/AlarmRecommendationDimension"
              },
              "title": "Dimensions",
              "type": "array"
            },
            "intent": {
              "description": "The intent or purpose of the alarm",
              "title": "Intent",
              "type": "string"
            }
          },
          "required": [
            "alarmDescription",
            "threshold",
            "period",
            "comparisonOperator",
            "statistic",
            "evaluationPeriods",
            "datapointsToAlarm",
            "treatMissingData",
            "intent"
          ],
          "title": "AlarmRecommendation",
          "type": "object"
        },
        "AlarmRecommendationDimension": {
          "description": "Represents a dimension for alarm recommendations.",
          "properties": {
            "name": {
              "description": "The name of the dimension",
              "title": "Name",
              "type": "string"
            },
            "value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "The value of the dimension (if specified)",
              "title": "Value"
            }
          },
          "required": [
            "name"
          ],
          "title": "AlarmRecommendationDimension",
          "type": "object"
        },
        "AlarmRecommendationThreshold": {
          "description": "Represents an alarm threshold configuration.",
          "properties": {
            "staticValue": {
              "description": "The static threshold value",
              "title": "Staticvalue",
              "type": "number"
            },
            "justification": {
              "description": "Justification for the threshold value",
              "title": "Justification",
              "type": "string"
            }
          },
          "required": [
            "staticValue",
            "justification"
          ],
          "title": "AlarmRecommendationThreshold",
          "type": "object"
        }
      },
      "title": "get_recommended_metric_alarmsOutput"
    }
  },
  {
    "name": "get_active_alarms",
    "description": "Gets all CloudWatch alarms currently in ALARM state.\n\n        This tool retrieves all CloudWatch alarms that are currently in the ALARM state,\n        including both metric alarms and composite alarms. Results are optimized for\n        LLM reasoning with summary-level information.\n\n        Usage: Use this tool to get an overview of all active alarms in your AWS account\n        for troubleshooting, monitoring, and operational awareness.\n\n        Args:\n            ctx: The MCP context object for error handling and logging.\n            max_items: Maximum number of alarms to return (default: 50).\n            region: AWS region to query. Defaults to 'us-east-1'.\n\n        Returns:\n            ActiveAlarmsResponse: Response containing active alarms.\n\n        Example:\n            result = await get_active_alarms(ctx, max_items=25)\n            if isinstance(result, ActiveAlarmsResponse):\n                print(f\"Found {len(result.metric_alarms + result.composite_alarms)} active alarms\")\n                for alarm in result.metric_alarms:\n                    print(f\"Metric Alarm: {alarm.alarm_name}\")\n                for alarm in result.composite_alarms:\n                    print(f\"Composite Alarm: {alarm.alarm_name}\")\n        ",
    "inputSchema": {
      "type": "object",
      "properties": {
        "max_items": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": 50,
          "description": "Maximum number of alarms to return (default: 50). Large values may cause context window overflow and impact LLM performance.",
          "title": "Max Items"
        },
        "region": {
          "default": "us-east-1",
          "description": "AWS region to query. Defaults to us-east-1.",
          "title": "Region",
          "type": "string"
        }
      },
      "title": "get_active_alarmsArguments"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "metric_alarms": {
          "description": "List of active metric alarms",
          "items": {
            "$ref": "#/$defs/MetricAlarmSummary"
          },
          "title": "Metric Alarms",
          "type": "array"
        },
        "composite_alarms": {
          "description": "List of active composite alarms",
          "items": {
            "$ref": "#/$defs/CompositeAlarmSummary"
          },
          "title": "Composite Alarms",
          "type": "array"
        },
        "has_more_results": {
          "default": false,
          "description": "Whether more alarms are available than the requested max_items",
          "title": "Has More Results",
          "type": "boolean"
        },
        "message": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Informational message about the results",
          "title": "Message"
        }
      },
      "$defs": {
        "CompositeAlarmSummary": {
          "description": "Summary information for a CloudWatch composite alarm in ALARM state.",
          "properties": {
            "alarm_name": {
              "description": "Name of the composite alarm",
              "title": "Alarm Name",
              "type": "string"
            },
            "alarm_description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Description of the alarm",
              "title": "Alarm Description"
            },
            "state_value": {
              "description": "Current state of the alarm",
              "title": "State Value",
              "type": "string"
            },
            "state_reason": {
              "description": "Reason for the current state",
              "title": "State Reason",
              "type": "string"
            },
            "alarm_rule": {
              "description": "Rule expression for the composite alarm",
              "title": "Alarm Rule",
              "type": "string"
            },
            "state_updated_timestamp": {
              "description": "When the alarm state was last updated",
              "format": "date-time",
              "title": "State Updated Timestamp",
              "type": "string"
            },
            "alarm_type": {
              "default": "CompositeAlarm",
              "description": "Type of alarm",
              "title": "Alarm Type",
              "type": "string"
            }
          },
          "required": [
            "alarm_name",
            "state_value",
            "state_reason",
            "alarm_rule",
            "state_updated_timestamp"
          ],
          "title": "CompositeAlarmSummary",
          "type": "object"
        },
        "MetricAlarmSummary": {
          "description": "Summary information for a CloudWatch metric alarm in ALARM state.",
          "properties": {
            "alarm_name": {
              "description": "Name of the alarm",
              "title": "Alarm Name",
              "type": "string"
            },
            "alarm_description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Description of the alarm",
              "title": "Alarm Description"
            },
            "state_value": {
              "description": "Current state of the alarm (ALARM)",
              "title": "State Value",
              "type": "string"
            },
            "state_reason": {
              "description": "Reason for the current state",
              "title": "State Reason",
              "type": "string"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Name of the metric being monitored",
              "title": "Metric Name"
            },
            "namespace": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Namespace of the metric",
              "title": "Namespace"
            },
            "dimensions": {
              "description": "Key dimensions for the metric",
              "items": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "title": "Dimensions",
              "type": "array"
            },
            "threshold": {
              "description": "Threshold value for the alarm",
              "title": "Threshold",
              "type": "number"
            },
            "comparison_operator": {
              "description": "Comparison operator used",
              "title": "Comparison Operator",
              "type": "string"
            },
            "state_updated_timestamp": {
              "description": "When the alarm state was last updated",
              "format": "date-time",
              "title": "State Updated Timestamp",
              "type": "string"
            },
            "alarm_type": {
              "default": "MetricAlarm",
              "description": "Type of alarm",
              "title": "Alarm Type",
              "type": "string"
            }
          },
          "required": [
            "alarm_name",
            "state_value",
            "state_reason",
            "threshold",
            "comparison_operator",
            "state_updated_timestamp"
          ],
          "title": "MetricAlarmSummary",
          "type": "object"
        }
      },
      "description": "Response containing active CloudWatch alarms.",
      "title": "ActiveAlarmsResponse"
    }
  },
  {
    "name": "get_alarm_history",
    "description": "Gets the history for a CloudWatch alarm with time range suggestions for investigation.\n\n        This tool retrieves the history for a specified CloudWatch alarm, focusing primarily\n        on state transitions to ALARM state. It also provides suggested time ranges for\n        investigation based on the alarm's configuration and history.\n\n        Usage: Use this tool to understand when an alarm fired and get useful time ranges\n        for investigating the underlying issue using other CloudWatch tools. The tool is\n        particularly useful for identifying patterns like alarm flapping (going in and out\n        of alarm state frequently).\n\n        Args:\n            ctx: The MCP context object for error handling and logging.\n            region: AWS region to query. Defaults to 'us-east-1'.\n            alarm_name: Name of the alarm to retrieve history for.\n            start_time: Optional start time for the history query. Defaults to 24 hours ago.\n            end_time: Optional end time for the history query. Defaults to current time.\n            history_item_type: Optional type of history items to retrieve. Defaults to 'StateUpdate'.\n            max_items: Maximum number of history items to return. Defaults to 50.\n            include_component_alarms: For composite alarms, whether to include details about component alarms.\n\n        Returns:\n            Union[AlarmHistoryResponse, CompositeAlarmComponentResponse]: Either a response containing\n            alarm history with time range suggestions, or component alarm details for composite alarms.\n\n        Example:\n            result = await get_alarm_history(\n                ctx,\n                alarm_name=\"my-cpu-alarm\",\n                start_time=\"2025-06-18T00:00:00Z\",\n                end_time=\"2025-06-19T00:00:00Z\"\n            )\n            if isinstance(result, AlarmHistoryResponse):\n                print(f\"Found {len(result.history_items)} history items\")\n                for suggestion in result.time_range_suggestions:\n                    print(f\"Suggested investigation time range: {suggestion.start_time} to {suggestion.end_time}\")\n        ",
    "inputSchema": {
      "type": "object",
      "properties": {
        "alarm_name": {
          "description": "Name of the alarm to retrieve history for",
          "title": "Alarm Name",
          "type": "string"
        },
        "start_time": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The start time for the history query in ISO format (e.g., '2023-01-01T00:00:00Z') or as a datetime object. Defaults to 24 hours ago.",
          "title": "Start Time"
        },
        "end_time": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The end time for the history query in ISO format (e.g., '2023-01-01T00:00:00Z') or as a datetime object. Defaults to current time.",
          "title": "End Time"
        },
        "history_item_type": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Type of history items to retrieve. Possible values: 'ConfigurationUpdate', 'StateUpdate', 'Action'. Defaults to 'StateUpdate'.",
          "title": "History Item Type"
        },
        "max_items": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": 50,
          "description": "Maximum number of history items to return (default: 50). Large values may cause context window overflow and impact LLM performance. Adjust time-range to limit responses.",
          "title": "Max Items"
        },
        "include_component_alarms": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": false,
          "description": "For composite alarms, whether to include details about component alarms. Defaults to false.",
          "title": "Include Component Alarms"
        },
        "region": {
          "default": "us-east-1",
          "description": "AWS region to query. Defaults to us-east-1.",
          "title": "Region",
          "type": "string"
        }
      },
      "required": [
        "alarm_name"
      ],
      "title": "get_alarm_historyArguments"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "result": {
          "anyOf": [
            {
              "$ref": "#/$defs/AlarmHistoryResponse"
            },
            {
              "$ref": "#/$defs/CompositeAlarmComponentResponse"
            }
          ],
          "title": "Result"
        }
      },
      "required": [
        "result"
      ],
      "$defs": {
        "AlarmDetails": {
          "description": "Represents key details about a CloudWatch alarm.",
          "properties": {
            "alarm_name": {
              "description": "Name of the alarm",
              "title": "Alarm Name",
              "type": "string"
            },
            "alarm_description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Description of the alarm",
              "title": "Alarm Description"
            },
            "alarm_type": {
              "description": "Type of alarm (MetricAlarm or CompositeAlarm)",
              "title": "Alarm Type",
              "type": "string"
            },
            "current_state": {
              "description": "Current state of the alarm",
              "title": "Current State",
              "type": "string"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Name of the metric (for MetricAlarm)",
              "title": "Metric Name"
            },
            "namespace": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Namespace of the metric (for MetricAlarm)",
              "title": "Namespace"
            },
            "dimensions": {
              "description": "Dimensions of the metric (for MetricAlarm)",
              "items": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "title": "Dimensions",
              "type": "array"
            },
            "threshold": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Threshold value (for MetricAlarm)",
              "title": "Threshold"
            },
            "comparison_operator": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Comparison operator (for MetricAlarm)",
              "title": "Comparison Operator"
            },
            "evaluation_periods": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Number of evaluation periods (for MetricAlarm)",
              "title": "Evaluation Periods"
            },
            "period": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Period in seconds (for MetricAlarm)",
              "title": "Period"
            },
            "statistic": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Statistic used (for MetricAlarm)",
              "title": "Statistic"
            },
            "alarm_rule": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Rule expression (for CompositeAlarm)",
              "title": "Alarm Rule"
            }
          },
          "required": [
            "alarm_name",
            "alarm_type",
            "current_state"
          ],
          "title": "AlarmDetails",
          "type": "object"
        },
        "AlarmHistoryItem": {
          "description": "Represents a processed CloudWatch alarm history item.",
          "properties": {
            "alarm_name": {
              "description": "Name of the alarm",
              "title": "Alarm Name",
              "type": "string"
            },
            "alarm_type": {
              "description": "Type of alarm (MetricAlarm or CompositeAlarm)",
              "title": "Alarm Type",
              "type": "string"
            },
            "timestamp": {
              "description": "Timestamp of the history item",
              "format": "date-time",
              "title": "Timestamp",
              "type": "string"
            },
            "history_item_type": {
              "description": "Type of history item (StateUpdate, ConfigurationUpdate, Action)",
              "title": "History Item Type",
              "type": "string"
            },
            "history_summary": {
              "description": "Human-readable summary of the history item",
              "title": "History Summary",
              "type": "string"
            },
            "old_state": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Previous state of the alarm (for StateUpdate items)",
              "title": "Old State"
            },
            "new_state": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "New state of the alarm (for StateUpdate items)",
              "title": "New State"
            },
            "state_reason": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Reason for the state change (for StateUpdate items)",
              "title": "State Reason"
            }
          },
          "required": [
            "alarm_name",
            "alarm_type",
            "timestamp",
            "history_item_type",
            "history_summary"
          ],
          "title": "AlarmHistoryItem",
          "type": "object"
        },
        "AlarmHistoryResponse": {
          "description": "Response containing alarm history and related information.",
          "properties": {
            "alarm_details": {
              "$ref": "#/$defs/AlarmDetails",
              "description": "Details about the alarm"
            },
            "history_items": {
              "description": "List of alarm history items",
              "items": {
                "$ref": "#/$defs/AlarmHistoryItem"
              },
              "title": "History Items",
              "type": "array"
            },
            "time_range_suggestions": {
              "description": "Suggested time ranges for investigation",
              "items": {
                "$ref": "#/$defs/TimeRangeSuggestion"
              },
              "title": "Time Range Suggestions",
              "type": "array"
            },
            "has_more_results": {
              "default": false,
              "description": "Whether more history items are available",
              "title": "Has More Results",
              "type": "boolean"
            },
            "message": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Informational message about the results",
              "title": "Message"
            }
          },
          "required": [
            "alarm_details"
          ],
          "title": "AlarmHistoryResponse",
          "type": "object"
        },
        "CompositeAlarmComponentResponse": {
          "description": "Response containing component alarm details for a composite alarm.",
          "properties": {
            "composite_alarm_name": {
              "description": "Name of the composite alarm",
              "title": "Composite Alarm Name",
              "type": "string"
            },
            "component_alarms": {
              "description": "Names of component alarms",
              "items": {
                "type": "string"
              },
              "title": "Component Alarms",
              "type": "array"
            },
            "alarm_rule": {
              "description": "Rule expression for the composite alarm",
              "title": "Alarm Rule",
              "type": "string"
            },
            "component_details": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/$defs/AlarmDetails"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Details about component alarms",
              "title": "Component Details"
            }
          },
          "required": [
            "composite_alarm_name",
            "alarm_rule"
          ],
          "title": "CompositeAlarmComponentResponse",
          "type": "object"
        },
        "TimeRangeSuggestion": {
          "description": "Represents a suggested time range for investigation.",
          "properties": {
            "start_time": {
              "description": "Start time for investigation",
              "format": "date-time",
              "title": "Start Time",
              "type": "string"
            },
            "end_time": {
              "description": "End time for investigation",
              "format": "date-time",
              "title": "End Time",
              "type": "string"
            },
            "reason": {
              "description": "Reason for this time range suggestion",
              "title": "Reason",
              "type": "string"
            }
          },
          "required": [
            "start_time",
            "end_time",
            "reason"
          ],
          "title": "TimeRangeSuggestion",
          "type": "object"
        }
      },
      "title": "get_alarm_historyOutput"
    }
  }
]