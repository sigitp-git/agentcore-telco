[
    {
      "description": "Get logs from CloudWatch for a specific resource in an EKS cluster.",
      "inputSchema": {
        "properties": {
          "cluster_name": {
            "description": "Name of the EKS cluster",
            "type": "string"
          },
          "end_time": {
            "description": "End time in ISO format",
            "type": "string"
          },
          "fields": {
            "description": "Custom fields to include in query results",
            "type": "string"
          },
          "filter_pattern": {
            "description": "CloudWatch Logs filter pattern",
            "type": "string"
          },
          "limit": {
            "description": "Maximum number of log entries to return",
            "type": "integer"
          },
          "log_type": {
            "description": "Log type (application, host, performance, control-plane, or custom)",
            "type": "string"
          },
          "minutes": {
            "description": "Number of minutes to look back",
            "type": "integer"
          },
          "resource_name": {
            "description": "Resource name to search for in log messages",
            "type": "string"
          },
          "resource_type": {
            "description": "Resource type (pod, node, container, cluster)",
            "type": "string"
          },
          "start_time": {
            "description": "Start time in ISO format",
            "type": "string"
          }
        },
        "required": [
          "resource_type",
          "cluster_name",
          "log_type"
        ],
        "type": "object"
      },
      "name": "get_cloudwatch_logs"
    },
    {
      "description": "Get metrics from CloudWatch for a specific resource in an EKS cluster.",
      "inputSchema": {
        "properties": {
          "cluster_name": {
            "description": "Name of the EKS cluster",
            "type": "string"
          },
          "dimensions": {
            "description": "Dimensions for the CloudWatch metric query",
            "type": "object"
          },
          "end_time": {
            "description": "End time in ISO format",
            "type": "string"
          },
          "limit": {
            "description": "Maximum number of data points to return",
            "type": "integer"
          },
          "metric_name": {
            "description": "Metric name (e.g., cpu_usage_total, memory_rss)",
            "type": "string"
          },
          "minutes": {
            "description": "Number of minutes to look back",
            "type": "integer"
          },
          "namespace": {
            "description": "CloudWatch namespace",
            "type": "string"
          },
          "period": {
            "description": "Period in seconds for metric data points",
            "type": "integer"
          },
          "start_time": {
            "description": "Start time in ISO format",
            "type": "string"
          },
          "stat": {
            "description": "Statistic to use for metric aggregation",
            "type": "string"
          }
        },
        "required": [
          "cluster_name",
          "metric_name",
          "namespace",
          "dimensions"
        ],
        "type": "object"
      },
      "name": "get_cloudwatch_metrics"
    },
    {
      "description": "Search the EKS Troubleshoot Guide for troubleshooting information.",
      "inputSchema": {
        "properties": {
          "query": {
            "description": "Your specific question or issue description related to EKS troubleshooting",
            "type": "string"
          }
        },
        "required": [
          "query"
        ],
        "type": "object"
      },
      "name": "search_eks_troubleshoot_guide"
    },
    {
      "description": "Manage EKS CloudFormation stacks with read and write operations.",
      "inputSchema": {
        "properties": {
          "cluster_name": {
            "description": "Name of the EKS cluster",
            "type": "string"
          },
          "operation": {
            "description": "Operation to perform (generate, deploy, describe, delete)",
            "type": "string"
          },
          "template_file": {
            "description": "Absolute path for the CloudFormation template",
            "type": "string"
          }
        },
        "required": [
          "operation"
        ],
        "type": "object"
      },
      "name": "manage_eks_stacks"
    },
    {
      "description": "List Kubernetes resources of a specific kind in an EKS cluster.",
      "inputSchema": {
        "properties": {
          "api_version": {
            "description": "API version of the Kubernetes resources",
            "type": "string"
          },
          "cluster_name": {
            "description": "Name of the EKS cluster",
            "type": "string"
          },
          "field_selector": {
            "description": "Field selector to filter resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind of the Kubernetes resources (e.g., Pod, Service)",
            "type": "string"
          },
          "label_selector": {
            "description": "Label selector to filter resources",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace of the Kubernetes resources",
            "type": "string"
          }
        },
        "required": [
          "cluster_name",
          "kind",
          "api_version"
        ],
        "type": "object"
      },
      "name": "list_k8s_resources"
    },
    {
      "description": "Get logs from a pod in a Kubernetes cluster.",
      "inputSchema": {
        "properties": {
          "cluster_name": {
            "description": "Name of the EKS cluster",
            "type": "string"
          },
          "container_name": {
            "description": "Container name (optional)",
            "type": "string"
          },
          "limit_bytes": {
            "description": "Maximum number of bytes to return",
            "type": "integer"
          },
          "namespace": {
            "description": "Namespace of the pod",
            "type": "string"
          },
          "pod_name": {
            "description": "Name of the pod",
            "type": "string"
          },
          "since_seconds": {
            "description": "Only return logs newer than this many seconds",
            "type": "integer"
          },
          "tail_lines": {
            "description": "Number of lines to return from the end",
            "type": "integer"
          }
        },
        "required": [
          "cluster_name",
          "namespace",
          "pod_name"
        ],
        "type": "object"
      },
      "name": "get_pod_logs"
    },
    {
      "description": "Get events related to a specific Kubernetes resource.",
      "inputSchema": {
        "properties": {
          "cluster_name": {
            "description": "Name of the EKS cluster",
            "type": "string"
          },
          "kind": {
            "description": "Kind of the involved object",
            "type": "string"
          },
          "name": {
            "description": "Name of the involved object",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace of the involved object",
            "type": "string"
          }
        },
        "required": [
          "cluster_name",
          "kind",
          "name"
        ],
        "type": "object"
      },
      "name": "get_k8s_events"
    },
    {
      "description": "List all available API versions in the Kubernetes cluster.",
      "inputSchema": {
        "properties": {
          "cluster_name": {
            "description": "Name of the EKS cluster",
            "type": "string"
          }
        },
        "required": [
          "cluster_name"
        ],
        "type": "object"
      },
      "name": "list_api_versions"
    },
    {
      "description": "Manage a single Kubernetes resource with various operations.",
      "inputSchema": {
        "properties": {
          "api_version": {
            "description": "API version of the Kubernetes resource",
            "type": "string"
          },
          "body": {
            "description": "Resource definition",
            "type": "object"
          },
          "cluster_name": {
            "description": "Name of the EKS cluster",
            "type": "string"
          },
          "kind": {
            "description": "Kind of the Kubernetes resource",
            "type": "string"
          },
          "name": {
            "description": "Name of the Kubernetes resource",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace of the Kubernetes resource",
            "type": "string"
          },
          "operation": {
            "description": "Operation to perform (create, replace, patch, delete, read)",
            "type": "string"
          }
        },
        "required": [
          "operation",
          "cluster_name",
          "kind",
          "api_version"
        ],
        "type": "object"
      },
      "name": "manage_k8s_resource"
    },
    {
      "description": "Apply a Kubernetes YAML from a local file.",
      "inputSchema": {
        "properties": {
          "cluster_name": {
            "description": "Name of the EKS cluster",
            "type": "string"
          },
          "force": {
            "description": "Whether to update resources if they already exist",
            "type": "boolean"
          },
          "namespace": {
            "description": "Default namespace to use for resources",
            "type": "string"
          },
          "yaml_path": {
            "description": "Absolute path to the YAML file to apply",
            "type": "string"
          }
        },
        "required": [
          "yaml_path",
          "cluster_name",
          "namespace"
        ],
        "type": "object"
      },
      "name": "apply_yaml"
    },
    {
      "description": "Generate Kubernetes manifest for a deployment and service.",
      "inputSchema": {
        "properties": {
          "app_name": {
            "description": "Name of the application",
            "type": "string"
          },
          "cpu": {
            "description": "CPU request for each container",
            "type": "string"
          },
          "image_uri": {
            "description": "Full ECR image URI with tag",
            "type": "string"
          },
          "load_balancer_scheme": {
            "description": "AWS load balancer scheme (internal or internet-facing)",
            "type": "string"
          },
          "memory": {
            "description": "Memory request for each container",
            "type": "string"
          },
          "namespace": {
            "description": "Kubernetes namespace to deploy to",
            "type": "string"
          },
          "output_dir": {
            "description": "Absolute path to the directory to save the manifest file",
            "type": "string"
          },
          "port": {
            "description": "Container port that the application listens on",
            "type": "integer"
          },
          "replicas": {
            "description": "Number of replicas to deploy",
            "type": "integer"
          }
        },
        "required": [
          "app_name",
          "image_uri",
          "output_dir"
        ],
        "type": "object"
      },
      "name": "generate_app_manifest"
    },
    {
      "description": "Add a new inline policy to an IAM role.",
      "inputSchema": {
        "properties": {
          "permissions": {
            "description": "Permissions to include in the policy",
            "type": "object"
          },
          "policy_name": {
            "description": "Name of the inline policy to create",
            "type": "string"
          },
          "role_name": {
            "description": "Name of the IAM role to add the policy to",
            "type": "string"
          }
        },
        "required": [
          "policy_name",
          "role_name",
          "permissions"
        ],
        "type": "object"
      },
      "name": "add_inline_policy"
    },
    {
      "description": "Get all policies attached to an IAM role.",
      "inputSchema": {
        "properties": {
          "role_name": {
            "description": "Name of the IAM role to get policies for",
            "type": "string"
          }
        },
        "required": [
          "role_name"
        ],
        "type": "object"
      },
      "name": "get_policies_for_role"
    },
    {
      "description": "Get CloudWatch metrics guidance for specific resource types in EKS clusters.",
      "inputSchema": {
        "properties": {
          "resource_type": {
            "description": "Type of resource to get metrics for (cluster, node, pod, namespace, service)",
            "type": "string"
          }
        },
        "required": [
          "resource_type"
        ],
        "type": "object"
      },
      "name": "get_eks_metrics_guidance"
    }
  ]